#1 당장 좋은 것만 선택하는 그리디

# 그리디 알고리즘은 어떠한 문제가 있을 때 단순 무식하게, 탐욕적으로 현재 상황에서
# 지금 당장 좋은 것만 고르는 방법을 의미한다.

# 코딩 테스트에서 접할 그리디 알고리즘의 문제 유형은 '사전에 외우고 있지 않아도
# 풀 수 있을 가능성이 높은 문제 유형' 이라는 특징이 있다.

# 예를 들어 여러 개의 데이터를 빠르게 정렬해야 하는 문제는 정렬 라이브러리를,
# 최단 경로를 빠르게 찾아야 하는 문제는 플로이드 워셜 (Floyd-Warshall) 혹은
# 다익스트라 (Dijkstra) 알고리즘을 외워 사용해야 한다.

# 보통 코딩 테스트에서 출제되는 그리디 알고리즘 유형의 문제는 창의력, 즉 문제를 풀기 위한
# 최소한의 아이디어를 떠올릴 수 있는 능력을 요구한다.

# 그리디 알고리즘은 어떠한 기준에 따라 가장 좋은 것을 선택하는 알고리즘이므로 문제에서
# "가장 큰 순서대로", "가장 작은 순서대로" 와 같은 기준을 알게 모르게 제시해준다.

# 대체로 이 기준은 정렬 알고리즘을 사용했을 때 만족시킬 수 있으므로 그리디 알고리즘 문제는
# 자주 정렬 알고리즘과 짝을 이뤄 출제된다.

# 예제 3-1: 거스름돈
# 당신은 음식점의 계산을 도와주는 점원이다. 카운터에는 거스름돈으로 사용할 500원, 100원,
# 50원, 10원짜리 동전이 무한히 존재한다고 가정한다. 손님에게 거슬러 줘야 할 돈이 N원일 때 거슬러
# 줘야 할 동정의 최소 개수를 구하라. 단, 거슬러 줘야 할 돈 N은 항상 10의 배수이다.

# 전략: 가장 큰 화폐 단위부터 돈을 거슬러 준다

N = int(input())
count = 0

coin_types = [500, 100, 50, 10]

for coin in coin_types:
    count = count + (N // coin)
    N = N % coin

print(count)

# 그리디 알고리즘의 정당성:
# 그리디 알고리즘은 탐욕적으로 문제에 접근했을 때 정확한 답을 찾을 수 있다는 보장이 있을 때 유용하다.
# 그리디 알고리즘으로 문제의 해버블 찾았을 때는 그 해법이 정당한지 검토해야 한다.
# 거스름돈 문재를 그리디 알고리즘으로 해결할 수 있는 이유는 가지고 있는 동전 중에서 큰 단위가 항상
# 작은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문이다.
# 만약 [500, 400, 100]: 800 = 400 + 400 // 500 + 100 + 100 + 100

# 결론: 그리디 알고리즘 문제에서는 문제 풀이를 위한 최소한의 아이디어를 떠올리고 이것이 정당한지
# 검토할 수 있어야 답을 도출할 수 있다.

# 어떤 코딩 테스트 문제를 만났을 때, 바로 문제 유형을 파악하기 어렵다면 그리디 알고리즘을 의심하고
# 문제를 해결할 수 있는 탐욕적인 해결법이 존재하는지 고민해보고 불가하다면 다이나믹 프로그래밍이나
# 그래프 알고리즘 등으로 해결할 수 있는지를 재차 고민해보는 것도 한 방법이다.